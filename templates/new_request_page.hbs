<div class="container-divider"></div>
<div class="container">
  {{#if signed_in}}{{!--{{#if true}}--}}
    <div class="sub-nav">
      {{breadcrumbs}}
      <div class="search-container">
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" focusable="false" viewBox="0 0 12 12"
          class="search-icon" aria-hidden="true">
          <circle cx="4.5" cy="4.5" r="4" fill="none" stroke="currentColor" />
          <path stroke="currentColor" stroke-linecap="round" d="M11 11L7.5 7.5" />
        </svg>
        {{search submit=false}}
      </div>
    </div>

    <h1>
      {{t 'submit_a_request'}}
    </h1>
    <div id="main-content" class="form">
      <div id="invalidOrganization" style="display: none">
        <h3> To submit a case and access available support channels, you must be registered under a valid organization.</h3>
        <h3>Please <a id="sign_out_link" href="/access/logout?return_to=[zendesk_domain_url]{{page_path 'help_center'}}">sign out</a> , self-register using your company email address, and then sign in again with that account.</h3>
      </div>
      <div id="new-request-form"></div>
    </div>
  {{else}}
    <div class="sub-nav">
      {{breadcrumbs}}
    </div>
    <!--div id="vue-form" v-cloak="">
      <div id="form-not-logged-in-message" style="display: block;"-->
        <h1>
          {{t 'submit_a_request'}}
        </h1>
        <div id="main-content" class="form">
          <div id="notSignedMsg" style="display: block">
            <h3>To submit a case and access available support channels, please self-register using your company email address and sign in 
              {{#link "sign_in" class="sign-in"}}here
              {{!--t 'sign_in'--}}
              {{/link}}.
            </h3>
            {{!--
            <p>If you are unable to sign in, click <a href="/hc/en-us/requests/new?ticket_form_id=1260811052249">here</a>.</p>
            --}}
            {{!--
            <p>If you are unable to sign in, click <a href="javascript:void(0);" onclick="show();">here</a>.</p>
            --}}
            <h3>Contact your account manager if you are unable to self-register or sign-in.</h3>
          </div>
          <!--div id="notSignedForm" style="display: none">
            <h2>Before you start, <span style="color: red;">please read</span>:</h2>
            <ul class="sso-form-notes" style="margin-top:-10px">
              <li>You are submitting this request without having logged into the Couchbase Support Site.</li>
              <li>As a result, your support case may see a longer delay before an agent is assigned.</li>
              <li>If you are able, please first {{#link "sign_in" class="sign-in"}} {{t 'sign_in'}} {{/link}}</li>
            </ul>
            <div id="new-request-form"></div>
          </div-->
        </div>
  {{/if}}
</div>

<script type="module">
  import { renderNewRequestForm } from "new-request-form";

  const container = document.getElementById("new-request-form");

  const settings = Object.freeze({{json settings}});

   const props = Object.freeze({
    requestForm: {{json new_request_form}},
    newRequestPath: {{json (page_path 'new_request')}},
    parentId: {{json parent.id}},
    parentIdPath: {{json parent.url}},
    locale: {{json help_center.locale}},
    baseLocale: {{json help_center.base_locale}},
    hasAtMentions: {{json help_center.at_mentions_enabled}},
    userRole: {{json user.role}},
    userId: {{json user.id}},
    brandId: {{json brand.id}},
    organizations: {{json user.organizations}},
    wysiwyg: true,
    answerBotModal: {
      answerBot: {{json answer_bot}},
      hasRequestManagement: {{json help_center.request_management_enabled}},
      isSignedIn: {{json signed_in}},
      helpCenterPath: {{json (page_path 'help_center')}},
      requestsPath: {{json (page_path 'requests')}},
      requestPath: {{json (page_path 'request' id=answer_bot.request_id)}}
    },
  });

  const formId = Object.freeze(props.requestForm.ticket_form_field.value);
  isAnonmymous = Object.freeze((props.userRole === "anonymous"));
  const hasOrganization = Object.freeze(props.organizations.length > 0);
  const indexEol = [];
  const indexClient = [];

  if (isAnonmymous || !hasOrganization) {
    //props.requestForm.ticket_form_field.options = [];
    /*for (let i = props.requestForm.ticket_form_field.options.length - 1; i >= 0; i--) {
      const value = props.requestForm.ticket_form_field.options[i].name;
      if (value.indexOf("General Question") == -1) {
          props.requestForm.ticket_form_field.options.splice(i, 1);
      }
    }
    props.requestForm.ticket_form_field.value = "1260811052249";*/

    if (!hasOrganization) {
      const domainName = window.location.origin;
      const node = $("#sign_out_link")
      const updatedHref = node.attr("href").replace('[zendesk_domain_url]', domainName);
      node.attr("href", updatedHref);
      $("#invalidOrganization").css("display", "block");
      $("#new-request-form").css("display", "none");
    }
  } else {

    if (formId != null) {
      // Set common field labels
      if (!isAnonmymous) {
        props.requestForm.cc_field.label = "Additional contacts you would like to include:";
      }
      props.requestForm.attachments_field.label = "Attachments (maximum attachment size 50MB)";

      const isQuestionOrSuggestion = formId === getFormId().QUESTION || formId === getFormId().SUGGESTION;
      
      if (isQuestionOrSuggestion) {
        // Handle Question/Suggestion form
        props.requestForm.ticket_fields[4].label = "Is this ticket for a Private Marketplace account?";
        props.requestForm.ticket_fields[4].description = "Please select this field if you are a private marketplace customer";
        indexEol.push(0);

        if (isAnonmymous) {
          // Keep only "No Impact" option for anonymous users
          const options = props.requestForm.ticket_fields[0].options;
          const noImpactIndex = options.findIndex(option => option.name.includes("No Impact"));
          if (noImpactIndex !== -1) {
            options.splice(noImpactIndex + 1);
          }
        }
      } else {
        // Handle other form types
        props.requestForm.ticket_fields[0].label = "Please select your Environment followed by Current Impact";
        props.requestForm.ticket_fields[1].label = "Briefly describe your business impact (max 2 lines)";
        indexEol.push(2);

        // Filter options for non-question/suggestion forms
        const options = props.requestForm.ticket_fields[0].options;
        
        // Remove options after "Obsolete"
        const obsoleteIndex = options.findIndex(option => option.name.includes("Obsolete"));
        if (obsoleteIndex !== -1) {
          options.splice(obsoleteIndex);
        }

        // Remove "Urgent / Blocker" and "No Impact" options
        for (let i = options.length - 1; i >= 0; i--) {
          const optionName = options[i].name;
          if (optionName.includes("Urgent / Blocker") || optionName.includes("No Impact")) {
            options.splice(i, 1);
          }
        }

        // Form-specific configurations
        const formConfigs = {
          [getFormId().SERVER]: {
            fields: {
              4: { label: "Is this SDK or Connector related?" },
              9: { 
                label: "Is this ticket for a Private Marketplace account?",
                description: "Please select this field if you are a private marketplace customer"
              },
              12: {
                label: "I understand and will collect and share the logs with Support shortly after ticket is created.",
                description: "Logs provide valuable information to help troubleshoot your problem, leading to faster turnaround times and better customer support experience."
              }
            },
            indices: { client: [5] }
          },
          [getFormId().MOBILE]: {
            fields: {
              6: { label: "Is this Couchbase Lite related?" },
              11: {
                label: "Is this ticket for a Private Marketplace account?",
                description: "Please select this field if you are a private marketplace customer"
              },
              14: {
                label: "I understand and will collect and share the logs with Support shortly after ticket is created.",
                description: "Logs provide valuable information to help troubleshoot your problem, leading to faster turnaround times and better customer support experience."
              }
            },
            indices: { eol: [4], client: [7] }
          },
          [getFormId().EDGE]: {
            fields: {
              4: { label: "Is this Couchbase Lite related?" },
              14: {
                label: "Is this ticket for a Private Marketplace account?",
                description: "Please select this field if you are a private marketplace customer"
              },
              17: {
                label: "I understand and will collect and share the logs with Support shortly after ticket is created.",
                description: "Logs provide valuable information to help troubleshoot your problem, leading to faster turnaround times and better customer support experience."
              }
            },
            indices: { eol: [5, 7], client: [10] }
          },
          [getFormId().OPERATOR]: {
            fields: {
              4: { label: "Is this Autonomous Operator related?" },
              8: {
                label: "Is this ticket for a Private Marketplace account?",
                description: "Please select this field if you are a private marketplace customer"
              },
              11: {
                label: "I understand and will collect and share the logs with Support shortly after ticket is created.",
                description: "Logs provide valuable information to help troubleshoot your problem, leading to faster turnaround times and better customer support experience."
              }
            },
            indices: { eol: [5] }
          }
        };

        const config = formConfigs[formId];
        if (config) {
          // Apply field configurations
          Object.entries(config.fields).forEach(([fieldIndex, fieldConfig]) => {
            const field = props.requestForm.ticket_fields[parseInt(fieldIndex)];
            field.label = fieldConfig.label;
            if (fieldConfig.description) {
              field.description = fieldConfig.description;
            }
          });

          // Apply indices
          if (config.indices.eol) {
            indexEol.push(...config.indices.eol);
          }
          if (config.indices.client) {
            indexClient.push(...config.indices.client);
          }
        }
      }
    }

    // Process EOL indices
    indexEol.forEach(index => {
      const options = props.requestForm.ticket_fields[index].options;
      const eolIndex = options.findIndex(node => node.name.includes("End of Life"));
      
      if (eolIndex !== -1) {
        options.splice(eolIndex + 1); // Remove all elements from EOL index + 1 to the end
      }
    });

    // Process client indices
    indexClient.forEach(index => {
      const options = props.requestForm.ticket_fields[index].options;
      
      // Remove elements containing "End of Life" and related items
      for (let i = options.length - 1; i >= 0; i--) {
        const optionName = options[i].name;
        const eolIndex = optionName.indexOf("End of Life");
        
        if (eolIndex !== -1) {
          const target = optionName.substring(0, eolIndex - 1);
          
          // Remove subsequent options that match target or contain "Obsolete"
          for (let j = i + 1; j < options.length;) {
            const nextOptionName = options[j].name;
            if (nextOptionName.includes(target) || nextOptionName.includes("Obsolete")) {
              options.splice(j, 1);
            } else {
              break;
            }
          }
        }
      }
    });

    renderNewRequestForm(settings, props, container);
  }
</script>

<script type="text/javascript">
  /*$(document).submit(function() {
      window.open("https://support.couchbase.com/hc/en-us/articles/218320083#support_server_logs", "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=768,height=768");
  });*/
  let isAnonmymous = false;
  const currentURL = window.location.href;
  const isSandbox = /couchbasesupport\d{10}\.zendesk\.com/.test(currentURL);

  function getFormId(condition = isSandbox) {
    if (condition) {
      return {
        SERVER: "360000545232",
        MOBILE: "360001799691",
        EDGE: "34622105022875",
        OPERATOR: "360001771952",
        QUESTION: "360001799831",
        SUGGESTION: "1900000171804"
      };
    } else {
      return {
        SERVER: "360000545232",
        MOBILE: "1900000174384",
        EDGE: "34692946527003",
        OPERATOR: "1260811054329",
        QUESTION: "1260811052249",
        SUGGESTION: "1900000171804"
      };
    }
  }

  function show() {
    $("#notSignedForm").css("display", "block");
    $("#notSignedMsg").css("display", "none");
  }

  $(function() {
    function getZdCustomFieldId(condition = isSandbox) {
      if (condition) {
        return {
          IMPACT: "360041809432",
          CRITICAL: "6004410489",
          SERVER: "360041809492",
          SYNC_GATEWAY: "360041809512",
          HAS_SDK: "31131035055771",
          CLIENT: "360041784231",
          LITE: "360041784251",
          EDGE: "34621365112091",
          OPERATOR: "360041809732",
          MARKET_PLACE: "8050543819035",
          LOGS_AGREEMENT: "1260822948929"
        };
      } else {
        return {
          IMPACT: "21227650",
          CRITICAL: "360045140512",
          SERVER: "20518787",
          SYNC_GATEWAY: "21076534",
          HAS_SDK: "31156791679259",
          CLIENT: "21076524",
          LITE: "21115995",
          EDGE: "34620727056155",
          OPERATOR: "360030664772",
          MARKET_PLACE: "12734656072219",
          LOGS_AGREEMENT: "1900002551744"
        };
      }
    }
    // Usage:
    // const ZD_CUSTOM_FIELD_ID = getZdCustomFieldId(yourCondition);

    const DOM_ID = {
      SERVER_MSG: "server_msg",
      CLIENT_MSG: "client_msg",
      SYNC_GATEWAY_MSG: "sync_gateway_msg",
      LITE_MSG: "lite_msg",
      EDGE_MSG: "edge_msg",
      OPERATOR_MSG: "operator_msg",
      IMPACT_MSG: "impact_msg",
      CRITICAL_MSG: "critical_msg",
      DESCRIPTION_MSG: "description_msg",
      MARKET_PLACE_MSG: "market_place_msg",
      LOGS_CHECK_MSG: "logs_understanding_msg",
      ATTACHMENTS_MSG: "attachments_msg"
    }

    const END_OF_LIFE_TAG = "__end_of_life";

    // Version lifecycle constants organized by product type
    const VERSION_LIFECYCLE = {
      SERVER: {
        END_OF_FULL_MAINTENANCE: ["(7_1_\\d+)", "(7_0_\\d+)"],
        END_OF_LIFE: ["(5_5_\\d+)", "(5_1_\\d+)", "(5_0_\\d+)"]
      },
      CLIENT: {
        END_OF_FULL_MAINTENANCE: [
          "(clientver__java__3_5_x)", "(clientver__net__3_4_x)", "(clientver__go__2_7_x)",
          "(clientver__node_js__4_2_x)", "(clientver__ruby__3_4_x)", "(clientver__c__3_2_x)",
          "(clientver__python__4_1_x)", "(clientver__php__4_1_x)", "(clientver__scala__1_5_x)",
          "(clientver__kotlin__1_2_x)",
          "(connectorver__kafka__4_1_x)", "(connectorver__elastic__4_3_x)", "(connectorver__spark__3_3_x)",
          "(connectorver__tableau__1_0_x)"
        ],
        END_OF_LIFE: [
          "(clientver__java__2_\\d+)", "(clientver__net__2_\\d+)", "(clientver__ruby__1_3_\\d+)",
          "(clientver__go__2_0_\\d+)", "(clientver__node_js__2_6_\\d+)", "(clientver__c__2_\\d+)",
          "(clientver__python__2_5_\\d+)", "(clientver__php__2_6_\\d+)", "(clientver__scala__1_5_\\d+)",
          "(X 0_0_\\d+)"
        ]
      },
      SYNC_GATEWAY: {
        END_OF_FULL_MAINTENANCE: ["(3_0_\\d+)", "(3_1_\\d+)"],
        END_OF_LIFE: ["(1_5_\\d+)", "(2_0_\\d+)", "(2_1_\\d+)", "(2_5_\\d+)", "(2_6_\\d+)", "(2_7_\\d+)"]
      },
      LITE: {
        END_OF_FULL_MAINTENANCE: ["(3_0_x)", "(3_1_x)"],
        END_OF_LIFE: ["(1_5_\\d+)", "(2_0_\\d+)", "(2_1_\\d+)", "(2_5_\\d+)", "(2_6_\\d+)", "(2_7_\\d+)"]
      },
      EDGE: {
        END_OF_FULL_MAINTENANCE: ["(0_0_x)"],
        END_OF_LIFE: ["(0_0_x)"]
      },
      OPERATOR: {
        END_OF_FULL_MAINTENANCE: ["(2_4_\\d+)", "(2_5_\\d+)", "(2_6_\\d+)"],
        END_OF_LIFE: ["(1_2_\\d+)"]
      }
    };

    // This list contain all the tags that are NOT applicable
    const IMPACT_TO_HIDE = ["current_impact__none", "current_impact__production__urgent_blocker", "current_impact__standby_dr__urgent_blocker",
      "current_impact__testing__urgent_blocker", "current_impact__development__urgent_blocker"
    ]

    function checkSupportPolicyVersion(id, endOfLifeValues, endOfFullMaintenanceValues, value) {
      var end_of_life = false;
      $(id).html("");

      // End of Life selection
      const pattern = new RegExp(END_OF_LIFE_TAG);
      if (pattern.test(value)) {
        $(id).html("<div class='end_of_life'>You have selected an <b>End of Life</b> version. We strongly advise you to migrate to a supported version at your earliest convenience. You will receive Support if you have purchased Extended Support for this version. Please contact your Account Manager if you have an inquire about this offering.</div>")
        end_of_life = true;
        return false; // breaks
      }
      if (!end_of_life) {
        $.each(endOfFullMaintenanceValues, function(i, val) {
          const pattern = new RegExp(val);
          if (pattern.test(value)) {
            $(id).html("<div class='end_of_full_maintanence'>You have selected an <b>End of Full Maintenance</b> version. We strongly advise you to migrate to a maintained version to benefit from fixes. Please contact your Account Manager if you have an inquire about Extended Maintenance which is available for Couchbase Server. </div>")
            return false; // breaks
          }
        });
      }
      return;
    }

    /*
     * Returns the intersection of ES6 Set objects. i.e., returns a new set with only elements contained in all the given sets.
     * 
     * @param {Set|Array} set1 First set
     * @param {Array<Array|Set>} sets Other sets
     * @returns {Set|Array} Intersection
     */
    function intersection(set1, ...sets) {
      if (!sets.length) {
        return set1;
      }
      const tmp = [...set1].filter(x => sets.every(y => Array.isArray(y) ? y.includes(x) : y.has(x)));
      return Array.isArray(set1) ? tmp : new Set(tmp);
    }

    $(document).ready(function() {
      // This will add a placeholder the Description fields
      $("#request_description_hint").replaceWith("");

      // Create a MutationObserver instance
      const observerValue = new MutationObserver((mutationsList) => {
        for (const mutation of mutationsList) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
            //console.log('value changed!');
            //console.log('Old value:', mutation.oldValue);
            //console.log('New value:', mutation.target.getAttribute('value'));
            const name = mutation.target.getAttribute('name');
            const value = mutation.target.getAttribute('value');
            // Perform actions based on the attribute change
            if (name.indexOf(getZdCustomFieldId().SERVER) != -1) {
              checkSupportPolicyVersion("#" + DOM_ID.SERVER_MSG, VERSION_LIFECYCLE.SERVER.END_OF_LIFE, VERSION_LIFECYCLE.SERVER.END_OF_FULL_MAINTENANCE, value);
            } else if (name.indexOf(getZdCustomFieldId().CLIENT) != -1) {
              // Check for Couchbase Server SDKs and Connectors
              checkSupportPolicyVersion("#" + DOM_ID.CLIENT_MSG, VERSION_LIFECYCLE.CLIENT.END_OF_LIFE, VERSION_LIFECYCLE.CLIENT.END_OF_FULL_MAINTENANCE, value);
            } else if (name.indexOf(getZdCustomFieldId().SYNC_GATEWAY) != -1) {
              checkSupportPolicyVersion("#" + DOM_ID.SYNC_GATEWAY_MSG, VERSION_LIFECYCLE.SYNC_GATEWAY.END_OF_LIFE, VERSION_LIFECYCLE.SYNC_GATEWAY.END_OF_FULL_MAINTENANCE, value);
            } else if (name.indexOf(getZdCustomFieldId().LITE) != -1) {
              checkSupportPolicyVersion("#" + DOM_ID.LITE_MSG, VERSION_LIFECYCLE.LITE.END_OF_LIFE, VERSION_LIFECYCLE.LITE.END_OF_FULL_MAINTENANCE, value);
            } else if (name.indexOf(getZdCustomFieldId().EDGE) != -1) {
              checkSupportPolicyVersion("#" + DOM_ID.EDGE_MSG, VERSION_LIFECYCLE.EDGE.END_OF_LIFE, VERSION_LIFECYCLE.EDGE.END_OF_FULL_MAINTENANCE, value);
            } else if (name.indexOf(getZdCustomFieldId().OPERATOR) != -1) {
              checkSupportPolicyVersion("#" + DOM_ID.OPERATOR_MSG, VERSION_LIFECYCLE.OPERATOR.END_OF_LIFE, VERSION_LIFECYCLE.OPERATOR.END_OF_FULL_MAINTENANCE, value);
            }
          }
        }
      });
      
      // Configure the observer to watch for attribute changes
      const configValue = Object.freeze({ attributes: true, attributeOldValue: true, attributeFilter: ['value'] });

      // Example using MutationObserver (vanilla JavaScript, but can be used with jQuery)
      const targetNode = document.body; // Or a more specific container element
      const config = Object.freeze({ childList: true, subtree: true });

      const observer = new MutationObserver((mutationsList, observer) => {
        for (const mutation of mutationsList) {
          if (mutation.type === 'childList') {
            const server = $('[name="request[custom_fields][' + getZdCustomFieldId().SERVER + ']"]')
            const client = $('[name="request[custom_fields][' + getZdCustomFieldId().CLIENT + ']"]')
            const mobile = $('[name="request[custom_fields][' + getZdCustomFieldId().SYNC_GATEWAY + ']"]')
            const cblite = $('[name="request[custom_fields][' + getZdCustomFieldId().LITE + ']"]')
            const edge = $('[name="request[custom_fields][' + getZdCustomFieldId().EDGE + ']"]')
            const operator = $('[name="request[custom_fields][' + getZdCustomFieldId().OPERATOR + ']"]')
            const impact = $('[name="request[custom_fields][' + getZdCustomFieldId().IMPACT + ']"]')
            const critical = $('[name="request[custom_fields][' + getZdCustomFieldId().CRITICAL + ']"]')
            const description = $('[name="request[description]"]')
            const market_place = $('[name="request[custom_fields][' + getZdCustomFieldId().MARKET_PLACE + ']"]')
            const logs = $('[name="request[custom_fields][' + getZdCustomFieldId().LOGS_AGREEMENT + ']"]') //I understand and will collect and share the logs with Support shortly after ticket is created.
            const attachments = $('label:contains("Attachments")') // $('[name="request[attachments]"]')

            //if ($(mutation.addedNodes).find('#your-async-element-id').length > 0) {
            if (server.length > 0 && $("#" + DOM_ID.SERVER_MSG).length == 0) {
              // This will add a description to the Couchbase Server field
              server.parent().parent().parent().after("<div id='" + DOM_ID.SERVER_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review our <a href=\"https://www.couchbase.com/support-policy/EOL\" target=\"_blank\" rel=\"noopener noreferrer\">End Of Life (EOL) Policy</a></p></div>");
              // Start observing the server field
              observerValue.observe(server[0], configValue);
            } else if (client.length > 0 && $("#" + DOM_ID.CLIENT_MSG).length == 0) {
              // This will add a description to the Couchbase Client field
              client.parent().parent().parent().after("<div id='" + DOM_ID.CLIENT_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Provide the complete version (major.minor.maintenance) in the details section and send us the <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#client_logs\" target=\"_blank\" rel=\"noopener noreferrer\">server and server SDK logs</a>.</p></div>");
              // Start observing the server field
              observerValue.observe(client[0], configValue);
            } else if (mobile.length > 0 && $("#" + DOM_ID.SYNC_GATEWAY_MSG).length == 0) {
              // This will add a description to the Couchbase Mobile field
              mobile.parent().parent().parent().after("<div id='" + DOM_ID.SYNC_GATEWAY_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review how to send us <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#mobile_logs\" target=\"_blank\" rel=\"noopener noreferrer\">server and mobile logs</a>.</p></div>");
              // Start observing the server field
              observerValue.observe(mobile[0], configValue);
            } else if (cblite.length > 0 && $("#" + DOM_ID.LITE_MSG).length == 0) {
              // This will add a description to the Couchbase Mobile field
              cblite.parent().parent().parent().after("<div id='" + DOM_ID.LITE_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review how to send us <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#mobile_logs\" target=\"_blank\" rel=\"noopener noreferrer\">server and mobile logs</a>.</p></div>");
              // Start observing the server field
              observerValue.observe(cblite[0], configValue);
            } else if (edge.length > 0 && $("#" + DOM_ID.EDGE_MSG).length == 0) {
              // This will add a description to the Couchbase Edge field
              edge.parent().parent().parent().after("<div id='" + DOM_ID.EDGE_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review our <a href=\"https://www.couchbase.com/support-policy/EOL\" target=\"_blank\" rel=\"noopener noreferrer\">End Of Life (EOL) Policy</a></p></div>");
              // Start observing the server field
              observerValue.observe(edge[0], configValue);
            } else if (operator.length > 0 && $("#" + DOM_ID.OPERATOR_MSG).length == 0) {
              // This will add a description to the Couchbase Operator field
              operator.parent().parent().parent().after("<div id='" + DOM_ID.OPERATOR_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review how to send us <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#server_logs\" target=\"_blank\" rel=\"noopener noreferrer\">server and operator logs</a>.</p></div>");
              // Start observing the server field
              observerValue.observe(operator[0], configValue);
            } else if (impact.length > 0 && $("#" + DOM_ID.IMPACT_MSG).length == 0) {
              // This will add a description to the Couchbase Connector field
              impact.parent().parent().parent().after("<div id='" + DOM_ID.IMPACT_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review our KB article for <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083\" target=\"_blank\" rel=\"noopener noreferrer\">priority definitions</a>.</p></div>");
            } else if (critical.length > 0 && $("#" + DOM_ID.CRITICAL_MSG).length == 0) {
              // This will add a description to the Couchbase Connector field
              critical.after("<div id='" + DOM_ID.CRITICAL_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review our KB article for <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083\" target=\"_blank\" rel=\"noopener noreferrer\">how to escalate your support ticket</a>.</p></div>");
 
              $(critical).css({'max-height': '65px', 'min-height': '65px'});
              $(critical).attr({'rows': '2', 'wrap': 'hard', 'maxlength': '256'});

              $(critical).on('keypress', function (event) {
                const textarea = $(this);
                const numberOfLines = ((textarea.val().match(/\n/g) || []).length + 1);
                const maxRows = parseInt(textarea.attr('rows'));

                if (event.which === 13 && numberOfLines === maxRows) {
                  return false;
                }
              });

           } else if (description.length > 0 && $("#" + DOM_ID.DESCRIPTION_MSG).length == 0) {
              description.prev().remove();
              // This will add a description to the Couchbase Connector field
              description.last().after("<div id='" + DOM_ID.DESCRIPTION_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Please enter the details of your request. A member of our support staff will respond as soon as possible.</p></div>");
           } else if (market_place.length > 0 && isAnonmymous /*&& $("#" + DOM_ID.MARKET_PLACE_MSG).length == 0*/) {
              market_place.parent().remove();
              // This will add a description to the Couchbase Market Place field
              //market_place.last().after("<div id='" + DOM_ID.MARKET_PLACE_MSG + "'></div>");  
              //market_place.parent().parent().parent().after("<div id='" + DOM_ID.MARKET_PLACE_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review our <a href=\"https://www.couchbase.com/support-policy/EOL\" target=\"_blank\" rel=\"noopener noreferrer\">End Of Life (EOL) Policy</a></p></div>");  
            } else if (logs.length > 0 && $("#" + DOM_ID.LOGS_CHECK_MSG).length == 0) {
              // This will add a description to the Couchbase Logs field
              logs.next().html("<div id='" + DOM_ID.LOGS_CHECK_MSG + "' class='form-field' style='display: inline-block;'><p style='color: rgb(47, 57, 65); font-size: 14px; font-weight: 600;'>I understand and will <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#server_logs\" target=\"_blank\" rel=\"noopener noreferrer\">collect and share the logs with Support</a> shortly after ticket is created.</p></div>");
              //logs.next().html("<div id='" + DOM_ID.LOGS_CHECK_MSG + "' class='form-field' style='padding-left: 10px;display: inline-block;'><p style='color: black; font-weight: bold;'>I understand and will <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083#server_logs\" target=\"_blank\" rel=\"noopener noreferrer\">collect and share the logs with Support</a> shortly after ticket is created.</p></div>");
            } else if (attachments.length > 0 && $("#" + DOM_ID.ATTACHMENTS_MSG).length == 0) {
              // This will add a description to the Couchbase Attachments field
              attachments.parent().append("<div id='" + DOM_ID.ATTACHMENTS_MSG + "'></div><div class='form-field' style='margin-top:5px'><p>Review instructions for <a href=\"https://support.couchbase.com/hc/en-us/articles/218320083\" target=\"_blank\" rel=\"noopener noreferrer\">Working with the Couchbase Support Team</a> on how to upload larger files.</p></div>").insertAfter("#upload-dropzone");
            }
          }
        }
      });

      observer.observe(targetNode, config);

      // This will change the spacing inside the Description field
      //$("#request_description_ifr").contents().find(".mce-content-body").css({'line-height': '8px'});
      //Adjust height for dropbox elements
      /*$(".nesty-panel").css({
        'max-height': '300px'
      });*/

    });
  }); 
</script>